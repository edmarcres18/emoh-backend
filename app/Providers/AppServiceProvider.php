<?php

namespace App\Providers;

use App\Models\SiteSetting;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\ServiceProvider;
use Inertia\Inertia;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Configure trusted proxies FIRST so HTTPS detection works properly
        $this->configureTrustedProxies();
        $this->enforceHttps();
        $this->shareInertiaData();
    }

    /**
     * Enforce HTTPS in production environment.
     *
     * This method ensures that all URLs generated by Laravel use HTTPS
     * when the application is running in production environment or when
     * FORCE_HTTPS is enabled. In non-production environments, it respects
     * the APP_URL setting.
     */
    private function enforceHttps(): void
    {
        // Check if request is secure (after proxies are configured)
        $isSecure = request()->isSecure() || request()->header('X-Forwarded-Proto') === 'https';
        
        // Check if HTTPS should be forced via environment variable or production environment
        $forceHttps = config('app.force_https', false) || App::environment('production');
        
        if ($forceHttps || $isSecure) {
            // Force HTTPS for all URL generation
            URL::forceScheme('https');
            
            // Also update the APP_URL config to use HTTPS
            $appUrl = config('app.url');
            if ($appUrl && !str_starts_with($appUrl, 'https://')) {
                config(['app.url' => preg_replace('/^http:/', 'https:', $appUrl)]);
            }

            // Ensure secure cookies when using HTTPS
            config(['session.secure' => true]);
            // Use 'lax' for better compatibility, 'none' only if needed for cross-site
            config(['session.same_site' => config('session.same_site', 'lax')]);
        } else {
            // In non-production environments, use the scheme from APP_URL
            $appUrl = config('app.url');
            if ($appUrl) {
                $scheme = parse_url($appUrl, PHP_URL_SCHEME);
                if ($scheme) {
                    URL::forceScheme($scheme);
                }
            }
        }
        
        // Ensure asset URLs use the correct scheme
        $this->configureAssetUrl();
    }

    /**
     * Configure trusted proxies for proper HTTPS detection.
     *
     * This is essential when running behind a reverse proxy like Cloudflare,
     * Nginx, or load balancer to ensure Laravel correctly detects HTTPS.
     */
    private function configureTrustedProxies(): void
    {
        // Trust all proxies in production (Cloudflare, load balancers, etc.)
        if (App::environment('production')) {
            request()->setTrustedProxies(
                ['*'], // Trust all proxies in production
                \Illuminate\Http\Request::HEADER_X_FORWARDED_FOR |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_HOST |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_PORT |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_PROTO |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_AWS_ELB
            );
        } else {
            // In development, trust local proxies only
            request()->setTrustedProxies(
                ['127.0.0.1', '::1', 'localhost'],
                \Illuminate\Http\Request::HEADER_X_FORWARDED_FOR |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_HOST |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_PORT |
                \Illuminate\Http\Request::HEADER_X_FORWARDED_PROTO
            );
        }
    }

    /**
     * Configure asset URL generation for proper HTTPS/HTTP handling.
     *
     * Ensures that asset URLs (CSS, JS, images from storage) use the
     * correct protocol whether in HTTP or HTTPS mode.
     */
    private function configureAssetUrl(): void
    {
        // Get the current request scheme
        $scheme = request()->isSecure() || request()->header('X-Forwarded-Proto') === 'https'
            ? 'https'
            : 'http';
        
        // Set asset URL to use the correct scheme
        $appUrl = config('app.url');
        if ($appUrl) {
            // Update asset URL if needed
            $assetUrl = preg_replace('/^https?:/', $scheme . ':', $appUrl);
            config(['app.asset_url' => $assetUrl]);
        }
    }

    /**
     * Share global data with Inertia.js.
     *
     * This method shares common data across all Inertia responses,
     * ensuring consistent data availability throughout the application.
     */
    private function shareInertiaData(): void
    {
        Inertia::share([
            'siteSettings' => function () {
                return SiteSetting::getSettings();
            },
            'app' => [
                'name' => config('app.name'),
                'url' => config('app.url'),
                'asset_url' => config('app.asset_url', config('app.url')),
                'environment' => App::environment(),
                'debug' => config('app.debug'),
            ],
            'flash' => function () {
                return [
                    'success' => session('success'),
                    'error' => session('error'),
                    'warning' => session('warning'),
                    'info' => session('info'),
                ];
            },
        ]);
    }
}
